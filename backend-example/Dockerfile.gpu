# ITScence Backend GPU Dockerfile
# ================================

# Use NVIDIA CUDA runtime as base image with development tools
FROM nvidia/cuda:12.2.2-devel-ubuntu22.04

# Prevent interactive prompts during build
ENV DEBIAN_FRONTEND=noninteractive
ENV TZ=UTC

# Set working directory
WORKDIR /app

# Install Python and system dependencies
RUN apt-get update && apt-get install -y --fix-missing \
    python3.11 \
    python3.11-venv \
    python3.11-dev \
    python3-pip \
    build-essential \
    cmake \
    pkg-config \
    libopencv-dev \
    libhdf5-dev \
    libhdf5-serial-dev \
    libatlas-base-dev \
    libjpeg-dev \
    libpng-dev \
    libtiff-dev \
    libavcodec-dev \
    libavformat-dev \
    libswscale-dev \
    libv4l-dev \
    libxvidcore-dev \
    libx264-dev \
    libgtk-3-dev \
    gfortran \
    curl \
    wget \
    software-properties-common \
    && rm -rf /var/lib/apt/lists/*

# Create symlinks for python
RUN ln -s /usr/bin/python3.11 /usr/bin/python

# Upgrade pip to latest version
RUN python -m pip install --upgrade pip

# Copy requirements first for better caching
COPY requirements-gpu-simple.txt requirements.txt
COPY requirements-ubuntu.txt requirements-fallback.txt
COPY requirements-minimal.txt requirements-minimal.txt

# Remove conflicting system packages that cause pip issues
RUN apt-get remove -y python3-blinker || true

# Install Python dependencies with multiple fallback strategies
RUN pip install --no-cache-dir -r requirements.txt || \
    (echo "Fallback to alternative requirements..." && pip install --no-cache-dir -r requirements-fallback.txt) || \
    (echo "Using minimal requirements..." && pip install --no-cache-dir -r requirements-minimal.txt && \
     echo "Installing additional packages..." && pip install --no-cache-dir scikit-learn scipy pandas motor gunicorn redis psutil python-multipart)

# Verify TensorFlow can detect GPU (optional check)
RUN python -c "import tensorflow as tf; print('TensorFlow version:', tf.__version__); print('GPU Available:', tf.config.list_physical_devices('GPU'))" || echo "TensorFlow GPU verification failed - will work in runtime"

# Copy application code
COPY . .

# Create necessary directories
RUN mkdir -p uploads temp_images logs face_database

# Set environment variables for GPU and CUDA 12.2.2
ENV PYTHONPATH=/app
ENV PYTHONUNBUFFERED=1
ENV PYTHONDONTWRITEBYTECODE=1
ENV TF_CPP_MIN_LOG_LEVEL=2
ENV TF_FORCE_GPU_ALLOW_GROWTH=true
ENV TF_GPU_MEMORY_LIMIT=2048
ENV TF_ENABLE_ONEDNN_OPTS=1
ENV NVIDIA_VISIBLE_DEVICES=all
ENV NVIDIA_DRIVER_CAPABILITIES=compute,utility
ENV LD_LIBRARY_PATH=/usr/local/cuda/lib64:$LD_LIBRARY_PATH

# Expose port
EXPOSE 8000

# Health check
HEALTHCHECK --interval=30s --timeout=30s --start-period=60s --retries=3 \
    CMD curl -f http://localhost:8000/health || exit 1

# Run the application with GPU optimization
CMD ["python", "run_gpu.py"] 